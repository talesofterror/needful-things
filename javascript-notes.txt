"Comparisons" = [ =, <, >, <=, >=, != ]
	return true or value, 1 or 0 

Comparing Strings: 
	Returns true or false based on the alphabetical order of the string values beginning at the first index.
	A is the lowest value and Z is the highest, though lowers letter all go after capital "Z", such that 
	lowercase "z" is the hiest value above capital "Z" 

Comparing values of different types
	the values are converted to numbers, such that: 
		alert("2" < 1) returns false because "2" becomes 2, which is not less than 1 
		alert("01" == 1) returns true because it is comparing 1 with 1 
	
	for boolean values, true becomes 1 and false becomes 0, such that: 
		alert(true == 0) is false becomes true is 1
		alert(false ==0) is true because false is 0 

	It possible sometimes for two values to be equal but for them to evaluate to booleans of different values
	for instance: 
		let a = 0
		alert( Boolean(a) ) // false 
		
		let b = "0" 
		alert( Boolean(b) ) // true

		alert(a == b) // true?! 

Strict equality
	the  [ == ] operator cannot differentiate between booleans of different values, such as 
	the difference between 0 and false. For instance: 
		alert(0 == false) // true
	same with an empty string. This is because the [ == ] operator converts values to numbers
	If we want to differentiate between [0] and [false] we need to use the strict equality
	operator: [ ===] 
	
	the strict equality compares values with converting them from their native type to a number
	ie. without type conversion. With the strict equality operator we get: 
	
		alert(0 === false) // false
		alert( 0 === "0" ) // false

	There is also a strict non-equality operator, [ !== ] (anologous to [!=], which returns true
	if the values are of different types. 

Comparing with null and undefined
	Behavior exihibited by comparing null and undefined is non-intuitive. 
	null and undefined are only equal to each other. 
	null and undefined are of different types, such that a strict equality check yields:
		alert(null === undefined) // false 
	
	When converted to a number using Number(), [ null ] becomes [0] and [ undefined ] becomes [NaN]. 
	HOWEVER! When compared using the regular equality check it yields
		alert(null == undefined) // true!
	even though they are not equal when converted to numbers. Weird. 

	Things get weirder when using other comparison operators with null and undefined. For instance: 
		alert( null > 0 ) // false
		alert( null == 0 ) // false
		alert( null >=0 ) // true
	In the above functions, the last one evals to true, meaning null is suppsoed to be greater than
	or equal to 0. However, the first expression evals to true 

	This is because equality checks and comparisons work differently, and when used in an equality
	check, null and undefined will only ever equal each other. That's why [ null == 0 ] is false

	[ undefined ] will return false for all comparisons.
		alert( undefined > 0 ) //false 
		alert( undefined < 0 ) //false 
		alert( undefined == 0 ) //false 
	because [undefined] yields [NaN] when converted to a number and can only be equal to null. 


1 true
2 false
3 false -- wrong. "2" > "12" is true bc both values are strings, and are thus evald using dictionary method. 
4 true
5 false 
6 false 
7 false



IF STATEMENTS

	if (condition1) { }
	// block of code to execute if condition 1 is true
	else if (condition2) { }
	// block of code to execute if condition1 is false and condition2 is true
	else { }
	// block of code to execute if condition1 and condition2 are both false 


LOGICAL OPERATORS ( [ || (OR), && (AND), ! (NOT), ?? (nullish coalescing) )

	OR ( || )

	in classical programming, OR only evals booleans values. In Javascript, you can also return values. 
	
	for booleans values, [ || ] returns true if any of the values are true, false if both values are false. 
	For instance: 
		true || true // true
		true || false // true
		false || true // true
		false || false // true
		0 || 1 // true
		0 || 0 // false, etc. 
	
	If a value is not a boolean but a string, the value is converted to a boolean for the eval. 
		if (1||0) { code }
			//this code will run because the 1 is evaled to true and 0 to false. 
		if (0||0) { code }
			//this code will not run because the 0 is a false value, making both 
			boolean values false. Use [ || ] to in an if statement to determine if any of the given 
			values evals to "true" 

	For multiple values, OR returns the first true value, or the last value given if all values are false. 
	For instance: 
		alert("string1" || "string2" || "string") // returns ["string1"]
		alert( null || undefined || 0) // returns 0
	
	When using variables, the value of the variable is converted to boolean, and if it evals to true the 
	value of the variable is returned, such that: 
		let firstName = "" 
		let lastName = ""
		let userName = "RickSanchez"
		
		alert(firstName || lastName || userName || "Anonymous")

		// The above returns [ "RickSanchez" ], but would return [ "Anonymous" ] if userName were empty
		as firstName and userName are. 


	When use with values that do something, such as an assignment or a function call, the action will occur 
	if it is not preceded by a value that evals to true, or if it is the final value chain of false values. 
	For instance: 
		alert( true || function() ) // will not call function() bc true value preceeded it. 
		alert( false|| function() ) // will call function() because it is the only true value; 
		alert ( "" || function() ) // will call function() because the empty string evals to 0, or false.


	AND ( && ) 

	In classical programming, AND returns true if both values eval to true. 
		true && true // true
		false && true // false
		false && false // false 

	In javascript, it also returns THE FIRST FALSE VALUE, the inverse of the OR operator: 
		alert( true || 1 || 0 || function() ) 
		// This will return 0, and the function will not be called. 
		alert( true || 1 || "hello" || function() )
		// will call the function because all values are true and it is the final item. 

	AND operations are evaluated before OR operators, such that:
		value1 && value2 || value3 && value4
	Can be understoof as: 
		(value1 && value2) || (value3 && value4) 


	CAVEAT
	This website I'm on suggests that using && and || operators instead of if statements is generally a bad
	idea due to it's being less readable. 


	
	NOT ( ! )
	
	Accepts a single argument and returns a booleans of the opposite value to the boolean which the argument
	evaluated to. For instance~ 
		alert( !true ) // is false because true evals to true.
		alert ( !0 ) // returns true because 0 evals to false.

	A DOUBLE NOT [ !! ] converts a value to boolean such that
		alert ( !!0 ) 
		// returns false because !0 is true, but the extra exclamation mark returns the opposite. 

	the Boolean() function will to the same as the double NOT but in a more readable way. 

	NOT had the highest precedence of all the logical operators. Not sure what that means right now.  

	
test: 
write an if condition to check that age is between 14 and 90 
	if (age >= 14 && age <= 90) { execute code }
write an if condition to check that the age is NOT between 14 and 90
	if (age <= 14 && age >= 90) { execute code }
	variant using NOT (!):
	if (!(age >= 14 && age >= 90) { execute code } 
write a prompt that asks for a username, and if the input is "admin" prompt for a password. 
If the username input is empty or escape is pressed, alert "canceled", or, if it's something 
other than "admin" say "I don't know you". The correct password is "TheMaster", which says
"Welcome" if entered and "Wrong password" for anything else.
	

	let userPrompt = prompt("Enter Login Name: ")
	let userPromptRepeat = userPrompt

	if (userPrompt == "Admin") {
	  let pwPrompt = prompt("Enter password: ")

	  if (pwPrompt == "TheMaster") {
	    alert("Welcome!")
	  } else if (pwPrompt == null) {
	    alert("Canceled")
	  } else { 
	    alert("Wrong password.") 
	    userPrompt = prompt("Enter Login Name: ")
	    }
	} else if (userPrompt == null) { 
	    alert("Canceled") 
	  } else { 
	    alert("I don't know you") 
	    }


FURTHERMORE: 

If you want to test a single variable multiple times using a logical operator you have to 
explicitly test against the variable each time. For Instance: 
	if (x === 5 || 6 || 7 || 8)
	// will always return true because it checks x only once, returns that as false, 
	then checks all the numbers (without reference to x), 

	to check the value of x against multiple values, you have to check each invidual 
	explcitily check against x each time, like so: 
	if (x === 5 || x===6 || x === 7 || x ===8)

SWITCH

Switch statements can be used when evaluation against one condition. The syntax is: 

	switch (variable) {  // 

	case x: 		// if variable = x do
		[ code block]
		break;
	case y: 		// if variable = y do
		[code block]
		break;
	default: 		// otherwise do
		[code block]
	}

	
TERNARY OPERATOR

The ternary operator is a shorter way of writing a simple conditional with one condition
and two possible actions. The syntax is: 

	x === condition ? [ function1() ] : [ function2() ]

	// it can be read as: if x === condition, run function1(), else run function2()



I have to finish this calendar for them. 

	const select = document.querySelector('select');
	const list = document.querySelector('ul');
	const h1 = document.querySelector('h1');

	select.addEventListener('change', () => {
	  const choice = select.value;

	// ADD CONDITIONAL HERE
	
		// 30 days: 
		// April || June || September || November
		//
		// 31 days: 
		// January || March ||May || July || August || October || December 
		// 
		// 28 days: 
		// February

	// OPTION ONE: SWITCH STATEMENT

	let days;

	switch(choice) {
	
	case "January" || "March" || "May" || "July" || "August" || "October" || "December":
		days = 31;
		break;
	case "April || "June" || "September" || "November": 
		days = 30;
		break;
	case default: 
		days = 28;
	}


	// OPTION TWO: IF STATEMENT 

	let days

        if (choice == "April" || choice == "June" || choice == "September" || choice == "November") {
                days = 30
        } else if (choice == "January" || choice == "March" || choice == "May" || choice == "July" 
	  || choice == "August" || choice == "October" || choice == "December") {
	        days = 31
          } else {
                days = 28
          }

	
	
	  createCalendar(days, choice);
	});

	function createCalendar(days, choice) {
	  list.innerHTML = '';
	  h1.textContent = choice;
	  for (let i = 1; i <= days; i++) {
	    const listItem = document.createElement('li');
	    listItem.textContent = i;
	    list.appendChild(listItem);
	  }
	}

	createCalendar(31,'January');


Make a ternary function that takes a color choice and applies it to the style. 

	const select = document.querySelector('select');
	const html = document.querySelector('.output');

	select.addEventListener('change', () => {
		const choice = select.value;

		// ADD SWITCH STATEMENT

		switch (choice) {
		
		case "white":
			update("white", "black");
			break;	
		case "black":
			update("black", "white");
			break;
		case "purple":
			update("purple", "green");
			break;
		case "yellow":
			update("yellow", "blue");
			break;
		case "psychedelic":
			update("gray", "red");
			break;
		}
	});

	function update(bgColor, textColor) {
	html.style.backgroundColor = bgColor;
	html.style.color = textColor;
}



Make a conditional statement that responds to the season entered and shows a different
text for each one. 

	let season = 'summer';
	let response;

	// Add your code here

	switch (season) {
		case "summer": 
			response = "Summertime, and the living is easy";
			break; 
		case "winter":
			response = "So... cold... Blood freezing.";
			break;
		case "spring": 
			response = "Flowers are blooming";
			break;
		case "fall": 
			response = "Back to school.";
			break;
		default: 
			response = "I don't know what season it is!";
	}

	// Don't edit the code below here!

	section.innerHTML = ' ';
	let para1 = document.createElement('p');
	para1.textContent = response;
	section.appendChild(para1);


Make a conditional statement that changes the message depending on the rang eof your score. 

	let response = "";
	let score = 75;
	let machineActive = false;

	// Add your code here


	// IF STATEMENT

	if (machineActive) {
		response = "The machine is on"
		if (score <= 19){
			response = "That was a terrible score -- Total fail!"
		} else if (score >=20 && score <= 39) {
			response = "You know some things, but it\'s a pretty bad score."
		} else if (score >= 40 && score <= 69) {
			response = "You did a passable job, not bad!"
		} else if (score >= 70 && score <= 89) {
			response = "That\'s a great score, you really know your stuff!"
		} else if (score >= 90 && score <= 100) {
			response = "What an amazing score! Did you cheat? Are you for real?"
		} else {
			response = "This is not possible. An error has occurred."
		}
	} else {
		response = "Please switch the machine on"
	}


	// SWITCH STATEMENT
		
	switch (true) {
	case score <= 19: 
		response = "That was a terrible score -- Total fail!";
		break;
	case score >= 20 && score <= 39:
		response = "You know something, but it\'s a pretty bad score.";
		break;
	case score >=40 && score <= 69:
		response = "You did a passable job, not bad!";
		break; 
	case score >=70 && score <= 89:
		response = "That\'s a great score, you really know your stuff";
		break;
	case score >=90 && score <= 100:
		response = "What an amazing score! Did you Cheat? Are you for real?";
		break;
	default || score === "": 
		response= "This is not possible. An error has occurred.";
	}

	// Don't edit the code below here!

	section.innerHTML = ' ';
	let para1 = document.createElement('p');
	let para2 = document.createElement('p');

	para1.textContent = `Your score is ${ score }`;
	para2.textContent = response;

	section.appendChild(para1);
	section.appendChild(para2);


Create a condition which determines if the machine is on, and checks a password if it is. 

	let machineActive = true;
	let pwd = 'cheese';

	let machineResult;
	let pwdResult;

	// Add your code here

	if (machineActive) {
		machineResult = "The machine is on."
		pwd === "cheese" ? 
			pwdResult = "Login successful!" 
			: pwdResult = "Incorrect password!"
	} else {
		machineResult = "The machine is off"
	}

	// Don't edit the code below here!

	section.innerHTML = ' ';
	let para1 = document.createElement('p');
	let para2 = document.createElement('p');

	para1.textContent = machineResult;
	para2.textContent = pwdResult;

	section.appendChild(para1);
	section.appendChild(para2);


They have me doing a refresher.

	// 1.

	if ("0") {
		alert( 'Hello');
	}

	// Will alert be shown? 

	// No.
	

	//2.

	// using the if..else construct, write code which asks: "what is the 'official' 
	name of javascript?
	// If the visitor enters "ECMAScript", then output "Right!", otherwise -- output
	"You don't know? ECMAScript!" 

	let question = prompt("What is the \'official\' name of Javascript?") 

	if (question == "ECMAScript") {
		alert("Right!")
	} else { 
		alert("You don't know? ECMAScript!")
	}

	
	//3. 

	// Using if..else, write the code which gets a number via prompt and then shows in alert:
	// * 1, if the value is greater than zero, 
	// * -1, if less than zero
	// * 0, if equals zero
	// Assume that the input is always a number.

	<!DOCTYPE html> 
	<html> 
	<body>
	<script>
		let question = prompt("Enter a number")

		if (prompt > 0) {
			alert("1")
		} else if (question < 0) {
			alert("-1)
		} else if (0) {
			alert("0")
		}
	</script>
	</body>
	</html>

	
	//4. 

	// rewrite this using the conditional operator [ ? ]
	// let result
	// if (a + b <4) {
	//	result = 'Below'
	// } else {
	// 	result = "Over"
	// }


	let result

	(a + b < 4) ? result = "Below" : result = "Over"


	// 5. 

	// Rewrite if..else using multiple ternary operators [ ? ]
	// let message 
	// if (login == 'Employee') {
	// 	message = 'Hello'
	// } else if (login == 'Director') {
	// 	message = 'Greetings'
	// } else if (login == '') {
	// 	message = "No login"
	// } else {
	// 	message = ''
	// }

	let message 

	(login == 'Employee') ? message = "Hello" :
	(login == 'Director') ? message = "Greetings" : 
	(login == '' ) ? message = "No login" : 
	''


KNOWLEDGE CHECK

What are the eight data types in Javascript? 
	Boolean
	Number
	String
	Null
	Undefined
	Symbol 
	BigInt
	Object 

Strings: template literals
	backticks are used to allow the use of variables within a string
	such as: 
	
	greeting = `Hello, my name is ${name}


FUNCTIONS: 

In Javascript are defined like this: 
	
	function functionName (parameter) {
	[code]
	}

and are invoked by calling them like this: 

	functionName(argument)


This is a user defined function, but functions built in to the browser or a software package
may come with it's own functions. 

When a function is part of an object it is called a method. They won't tell me about this yet
though. 

	ANONYMOUS FUNCTION AND ARROW FUNCTIONS

You can make a function that doesn't have a name (an anonymous function). That takes the form
of: 	
	(function () {
	alert("hello")
	}}

An anonymous function can be used when another function takes a function as an argument. 

	function logKey(event) {
	console.log(`You pressed "${event.key}".`); 
	}

	document.querySelector(".textbox").addEventListener("keydown", logKey);

Arrow functions can be used to pass anonymous functions

	document.querySelector(".textbox").addEventListener("keydown",
	() => console.log(`You pressed "${event.key}".`)

Arrow functions will return the value of it's code if it contains only one instruction. 


	SCOPE

    const x = 1;

    function a() {
    	const y = 2;
    }

    function b() {
    	const z = 3;
    }

    function output(value) {
    	const para = document.createElement('p');
    	document.body.appendChild(para);
    	para.textContent = `Value: ${value}`;
    }

Changes to argument variables passed into function are not reflected globally. 

Changes to object properties made within the function are reflected globally,
such as with: 
	
	function editMake(myObject) {	// created a function that take an object as
	myObject.make = "toyota"; 	// as a parameter and assigns the [ make ]
	}				// property of that object to "toyota"

	const myCar = {			// creates a myCar object with 3 properties
	make: "Honda", 			// one of which is [make], who's default value
	model: "Accord", 		// is "Honda" 
	year: 1998;
	}

	console.log(myCar.make)		// Would return "Honda"

	editMake(myCar); 		// passes the myCar object to the editMake function
					// which assigns the [make] property of it's argument
	concole.log(myCar.make)		// resulting in this log to return "toyota"

Similarly, values changed in an Array will be seen globally as well. 

functions can be recursive (call themselves inside themselves) if they are given a name. 

	const factorial = function fac(n) {
    	return n < 2 ? 1 : n * fac(n - 1);
  	}

	console.log(factorial(10))

	- or - 

	function fac(n) {
	return n < 2 ? 1 : n * fac(n-1)
	}

	console.log( fac(3) )


[ while ] can be written as a recursive loop. For instance: 

	let x = 0		// create a variable to store the iterator 
	while (x < 10) {	// while the iterator is less than 10...
		//do stuff	// code
		x++		// add 1 to x for that iteration
	}

is the same as writing 

	function loop(x) {	// create a function that takes parameter x

		if (x >=10) {	// if x is less than or equal to 10
		return		// get out of the function
		}

		loop(x + 1) 	// otherwise (no explicit else statement) add 1 to x
	}

	loop(0)			// call the function with parameter x starting at 0

This creates a cal stack evident here: 

	function foo(i) {
	  if (i < 0) {
	    return;
	  }
	  console.log(`begin: ${i}`);
	  foo(i - 1);
	  console.log(`end: ${i}`);
	}
	foo(3);

	// Output:

	// begin: 3
	// begin: 2
	// begin: 1
	// begin: 0
	// end: 0
	// end: 1
	// end: 2
	// end: 3
	


	CLOSURES

Functions can be placed within one another, creating a "closure" - The outer function can 
take a parameter which the inner function can use itself. The inner function can take an
entirely different parameter and do something with both. 

	
	function outside(x) {
	  function inside(y) {
	    return x + y;
	  }
	  return inside;
	}
	const fnInside = outside(3); // Think of it like: give me a function that 
					adds 3 to whatever you give it
	const result = fnInside(5); // returns 8
	const result1 = outside(3)(5); // returns 8

	// fnInside becomes a pointer for the inner function, itself loaded with the 
	// x value of "3". Calling that container with another argument, "5", loads the 
	// inner function with a value "5". x has been defined within the inside
	// function by the outer function, meaning 8 is returned. 

 
You can make a function that can functions as arguments. for instance: 
	
	function showMessage(from, text = anotherFunction()) {
		[ code ]
	}

In the example above the detault value for [ text] is set to a function, but will
only be called if no other argument value text is provided to the to the parameter 

A function that has a parameter but is called with no function returns undefined. 
You can set a conditional to check is the argument is undefined by saying 
	
	function (num){
		if (num === undefined) {
			console.log("argument undefined!")
		}
	}

	
	NULLISH COALESCING OPERATOR
	
writen as [ ?? ], as in 

	a ?? b

determined is a value is defined or undefined (null or undefined). 

	a ?? b 

	// if a is defined, return a
	// if a isn't defined then b 

	// aka, returns the first value that's not null or undefined. 

In relations to the previous topic, the nullish coalescing operator can be used
to determined if an argument has been defined or not, such as: 

	let user
	alert(user ?? "Anonymou)

	// alert() will return the value for [ user ], unless that values is 
	// null or undefined, in which case it returns the string "Anonymous" 


	FUNCTION NAMING

Functions usually do something, so it's best to start with a verb describing
what the function does. 

	showMessage() 
	getAge() 
	calcSum()
	etc ...

A function should do more than what it's name suggests, for instance a 
function named getAge() shouldn't also display the age.



TESTS 

Write modify the function below to remove the if/else statements

	function checkAge(age) {
	    if (age > 18) {
	        return true
	    } else {
	        return confirm("Did your parents allow you?")
	    }
	}

	
	// ternary version

	let checkAge1 = (age) => {
	    age > 18 ? true : confirm("Did your parents allow you?")
	}

	// OR version
	
	let checkAge2 = (age) => age > 18 || confirm("Did your parents allow you?")


Write a function which returns the least of two numbers. 

	let min = (a, b) => a > b ? b : a

Write a function that returns [ x ] to the power of [ n ]. 

	let pow = (x, n) => 
		for (i = 0; i >= n; i++) {
			x *= x
		}

	INCORRECT!! It should be: 

	let pow = (x, n) => {
	let result = x
	for (i = 0; i < n; i++) {
	        result *= x
	    }
	return result;
	}

	/*
	pow(3, 2)
	it takes a number in, x. assigns result to the original value of x, say 3
	first iteration, i is 1. if i is less than 2, increment i by 1
	i = 1
	    result = 3
	    3 * 3 = 9
	    i = 2
	i = 2
	    exit
	    return result 9

	WHAT I WAS DOING (after edits, not my above original code):
	i = 0
	    result = 3
	    3 * 3 = 9
	    i = 1
	i = 1
	    result = 9
	    9 * 3 = 27
	    i = 2
	i = 2
	    exit
	    return result 27
	*/

	
	CALLBACK FUNCTIONS 

Callback functions are functions passed as arguments to another function, executed
as a result of some condition of the host function. 

for example: 

	function ask (question, yes, no) {
	if (confirm(question)) yes()
	else no()
	
	}

	function showOk () {
	alert ("Confirmed.")
	}

	function showCancelled () {
	alert("Operation cancelled.")
	}

	ask("Confirm choice?", showOk, showCancelled). // entered as an argument without the parenthsis
						       // called within the ask() function as yes()
						       // and no()

Callback function can be entered directly as an argument without being assigned a name. 

	function ask(question, yes, no){
		if (confirm(question)) yes() 
		else no()
	}

	ask("Confirm choice?",
		function () {alert("confirmed")}
		function () {alert("denied")}


	FUNCTION EXPRESSION VERSUS FUNCTION DELCARATION

A function expression is declared: 

	let funcName = function () { [ code ] }

A function declaration is declared: 

	function funcName() { [ code ]}

The different between them is that a function declaration is placed in memory BEFORE 
execution of the code, whereas a function expression can only be call once the execution
reaches that line of code. This is why functions declations can be hoisted anywhere in the script, 
where as function expressions can only be called after the line defining it is executed. 


	ARROW FUNCTIONS

Arrow functions are functions that are more concisely stated. 

	let sum = (a, b) => a + b 

	// assigns [ sum ] to a function that adds it's two parameters together. 
	// sum() must be called in order for the function to exectute. 

Arrow functions can be used in callbacks 

	let age = prompt("How old are you?"); 

	welcome = (age < 18) ? () => alert("too young!") : () => alert("come on in!")

	welcome()

	// This seems like a bad example they're giving me because alert() would be called
	// regardless of whether it is an arrow function. Whatever. 

	// interesting to note here is welcome(). It only contained a condition check
	// but needs to be called as a function to work. Maybe because conditional statement 
	// are functions by default. 

Arrow functions utilizing one line need no curly braces {}. The value of the right hand 
statment returns automatically. 

Arrow function containing more than one line require the curcly braces plus the return 
statement to return a value. 


TASK 

Replace function expressions with arrow functions in the code below. 

	function ask(question, yes, no) {
		if (confirm(question)) yes()
		else no()
	}

	ask("Confirm choice?", 
		function() {alert("confirmed"), 
		function() {alert("denied")}
	)

	// 

	let ask = (question, yes, no) => 
		question ? yes() 
		: no()

	ask("confirm choice?", 
		() => alert("confirmed."),
		() => alert("denied.")
	)

	// correct. 


